// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Persistence.Context.Context;

#nullable disable

namespace OnlineShop.Persistence.Context.Migrations
{
    [DbContext(typeof(OnlineShopDbContext))]
    partial class OnlineShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.CustomerAggregate.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.OrderAggregate.Entitites.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.OrderAggregate.Entitites.OrderItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.ProductAggregate.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.CustomerAggregate.Entities.CustomerEntity", b =>
                {
                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.CustomerAggregate.ValueObjects.CustomerName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("CustomerEntityId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerEntityId");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.OrderAggregate.Entitites.OrderEntity", b =>
                {
                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.OrderAggregate.ValueObjects.Discount", "Discount", b1 =>
                        {
                            b1.Property<Guid>("OrderEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("DiscountAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("DiscountType")
                                .HasColumnType("int");

                            b1.HasKey("OrderEntityId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderEntityId");
                        });

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.OrderAggregate.ValueObjects.OrderPrice", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("OrderEntityId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderEntityId");
                        });

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.OrderAggregate.ValueObjects.ShippingOption", "ShippingOption", b1 =>
                        {
                            b1.Property<Guid>("OrderEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("OrderEntityId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderEntityId");
                        });

                    b.Navigation("Discount");

                    b.Navigation("ShippingOption");

                    b.Navigation("TotalPrice");
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.OrderAggregate.Entitites.OrderItemEntity", b =>
                {
                    b.HasOne("OnlineShop.Core.Domain.Aggregates.OrderAggregate.Entitites.OrderEntity", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.ProductAggregate.ValueObjects.ProductName", "Name", b1 =>
                        {
                            b1.Property<Guid>("OrderItemEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderItemEntityId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemEntityId");
                        });

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.ProductAggregate.ValueObjects.ProductPackingMethod", "PackagingMethod", b1 =>
                        {
                            b1.Property<Guid>("OrderItemEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("OrderItemEntityId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemEntityId");
                        });

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.ProductAggregate.ValueObjects.ProductPrice", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderItemEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("OrderItemEntityId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemEntityId");
                        });

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.OrderAggregate.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("OrderItemEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("OrderItemEntityId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemEntityId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PackagingMethod")
                        .IsRequired();

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.ProductAggregate.Entities.ProductEntity", b =>
                {
                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.ProductAggregate.ValueObjects.ProductName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProductEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("ProductEntityId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductEntityId");
                        });

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.ProductAggregate.ValueObjects.ProductPackingMethod", "PackagingMethod", b1 =>
                        {
                            b1.Property<Guid>("ProductEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("ProductEntityId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductEntityId");
                        });

                    b.OwnsOne("OnlineShop.Core.Domain.Aggregates.ProductAggregate.ValueObjects.ProductPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductEntityId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductEntityId");
                        });

                    b.Navigation("Name");

                    b.Navigation("PackagingMethod");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("OnlineShop.Core.Domain.Aggregates.OrderAggregate.Entitites.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
